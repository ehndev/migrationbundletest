name: CI - EF Core Migrations

on:
  push:
    branches: [master]
    paths-ignore:
      - "README.md"
  pull_request:
    branches: [master]
    paths-ignore:
      - "README.md"
  workflow_dispatch:

jobs:
  apply-migrations:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Install EF Core Tools
        run: dotnet tool install --global dotnet-ef

      - name: Read Database Connection String
        run: echo "DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}" >> $GITHUB_ENV

      - name: Extract DB Credentials
        run: |
           echo "DB_CONNECTION_STRING=$DB_CONNECTION_STRING"
           export DB_HOST=$(echo "$DB_CONNECTION_STRING" | sed -n 's/.*Host=\([^;]*\);.*/\1/p')
           export DB_USER=$(echo "$DB_CONNECTION_STRING" | sed -n 's/.*Username=\([^;]*\);.*/\1/p')
           export DB_PASS=$(echo "$DB_CONNECTION_STRING" | sed -n 's/.*Password=\([^;]*\);.*/\1/p')
           echo "DB_HOST=$DB_HOST"
           echo "DB_USER=$DB_USER"
           echo "DB_PASS=$DB_PASS"
           echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
           if [ -n "$DB_PASS" ]; then
            echo "::add-mask::$DB_PASS"
           fi
        
      - name: Confirm Database Connection
        run: |
          echo "Checking DB connection to $DB_HOST..."
          sudo apt-get install -y postgresql-client
          PGPASSWORD="$DB_PASS" pg_isready -h "$DB_HOST" -U "$DB_USER" || (echo "Database connection failed!" && exit 1)
          echo "âœ… Database connection successful!"

      - name: Find All Migration Projects
        id: find_migrations
        run: |
          echo "MIGRATION_PROJECTS=$(find . -type f -name '*.csproj' -path '*/migrationbundle/*' | xargs dirname | paste -sd ' ' -)" >> $GITHUB_ENV

      - name: Define Migration Contexts
        run: echo "MIGRATION_CONTEXTS=(migrationdbcontext orgdbcontext)" >> $GITHUB_ENV


      - name: Generate Migrations if Pending
        run: |
                for project in $MIGRATION_PROJECTS; do
                for context in ${MIGRATION_CONTEXTS[@]}; do
                 echo "Checking for pending migrations for $context in $project"
                 PENDING=$(dotnet ef migrations list --project "$project" --context "$context" | tail -n +3 | wc -l)
                 if [ "$PENDING" -gt 0 ]; then
                   echo "Generating migration for $context in $project"
                   dotnet ef migrations add AutoGeneratedMigration --project "$project" --context "$context"
                 else
                   echo "No pending migrations for $context in $project"
                 fi
                done
                done

      - name: Generate Migration Bundles
        run: |
                    for project in $MIGRATION_PROJECTS; do
                      for context in ${MIGRATION_CONTEXTS[@]}; do
                        echo "Generating migration bundle for $context in $project"
                        dotnet ef migrations bundle -p "$project" --context "$context" --output "$project/efbundle-$context.exe" --force
                      done
                    done
    #  - name: Generate Migrations if Pending
     #   run: |
     #    for project in $MIGRATION_PROJECTS; do
     #     echo "Checking for pending migrations for $project"
      #    # Check if there are pending migrations
      #    if git diff --quiet HEAD -- "$project"; then
      #      echo "No changes detected for migrations in $project"
      #    else
      #      echo "Generating migration for $project"
     #       dotnet ef migrations add AutoGeneratedMigration --project "$project"
     #     fi
     #    done
     # - name: Generate Migration Bundles
     #   run: |
     #     for project in $MIGRATION_PROJECTS; do
     #       echo "Generating migration bundle for $project"
      #      dotnet ef migrations bundle -p "$project" --output "$project/efbundle.exe" --force
      #    done

      - name: Run EF Core Migrations
        run: |
          for project in $MIGRATION_PROJECTS; do
            echo "Applying migrations for $project"
            # Print the connection string being passed to ensure it's correct
            echo "Using connection string: $DB_CONNECTION_STRING"
            (cd "$project" && chmod +x efbundle.exe && ./efbundle.exe --connection "$DB_CONNECTION_STRING")
          done

      - name: Confirm Migration Execution
        run: echo "All migrations applied successfully!"
